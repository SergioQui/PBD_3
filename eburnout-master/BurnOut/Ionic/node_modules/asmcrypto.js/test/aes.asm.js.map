{"version":3,"file":null,"sources":["C:/Users/Lippai Adam/Repositories/asmcrypto.js/src/aes/aes.asm.js"],"sourcesContent":["/**\r\n * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.\r\n * @author Artem S Vybornov <vybornov@gmail.com>\r\n * @license MIT\r\n */\r\nexport var AES_asm = function () {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Galois Field stuff init flag\r\n     */\r\n    var ginit_done = false;\r\n\r\n    /**\r\n     * Galois Field exponentiation and logarithm tables for 3 (the generator)\r\n     */\r\n    var gexp3, glog3;\r\n\r\n    /**\r\n     * Init Galois Field tables\r\n     */\r\n    function ginit () {\r\n        gexp3 = [],\r\n        glog3 = [];\r\n\r\n        var a = 1, c, d;\r\n        for ( c = 0; c < 255; c++ ) {\r\n            gexp3[c] = a;\r\n\r\n            // Multiply by three\r\n            d = a & 0x80, a <<= 1, a &= 255;\r\n            if ( d === 0x80 ) a ^= 0x1b;\r\n            a ^= gexp3[c];\r\n\r\n            // Set the log table value\r\n            glog3[gexp3[c]] = c;\r\n        }\r\n        gexp3[255] = gexp3[0];\r\n        glog3[0] = 0;\r\n\r\n        ginit_done = true;\r\n    }\r\n\r\n    /**\r\n     * Galois Field multiplication\r\n     * @param {int} a\r\n     * @param {int} b\r\n     * @return {int}\r\n     */\r\n    function gmul ( a, b ) {\r\n        var c = gexp3[ ( glog3[a] + glog3[b] ) % 255 ];\r\n        if ( a === 0 || b === 0 ) c = 0;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Galois Field reciprocal\r\n     * @param {int} a\r\n     * @return {int}\r\n     */\r\n    function ginv ( a ) {\r\n        var i = gexp3[ 255 - glog3[a] ];\r\n        if ( a === 0 ) i = 0;\r\n        return i;\r\n    }\r\n\r\n    /**\r\n     * AES stuff init flag\r\n     */\r\n    var aes_init_done = false;\r\n\r\n    /**\r\n     * Encryption, Decryption, S-Box and KeyTransform tables\r\n     */\r\n    var aes_sbox, aes_sinv, aes_enc, aes_dec;\r\n\r\n    /**\r\n     * Init AES tables\r\n     */\r\n    function aes_init () {\r\n        if ( !ginit_done ) ginit();\r\n\r\n        // Calculates AES S-Box value\r\n        function _s ( a ) {\r\n            var c, s, x;\r\n            s = x = ginv(a);\r\n            for ( c = 0; c < 4; c++ ) {\r\n                s = ( (s << 1) | (s >>> 7) ) & 255;\r\n                x ^= s;\r\n            }\r\n            x ^= 99;\r\n            return x;\r\n        }\r\n\r\n        // Tables\r\n        aes_sbox = [],\r\n        aes_sinv = [],\r\n        aes_enc = [ [], [], [], [] ],\r\n        aes_dec = [ [], [], [], [] ];\r\n\r\n        for ( var i = 0; i < 256; i++ ) {\r\n            var s = _s(i);\r\n\r\n            // S-Box and its inverse\r\n            aes_sbox[i]  = s;\r\n            aes_sinv[s]  = i;\r\n\r\n            // Ecryption and Decryption tables\r\n            aes_enc[0][i] = ( gmul( 2, s ) << 24 )  | ( s << 16 )            | ( s << 8 )             | gmul( 3, s );\r\n            aes_dec[0][s] = ( gmul( 14, i ) << 24 ) | ( gmul( 9, i ) << 16 ) | ( gmul( 13, i ) << 8 ) | gmul( 11, i );\r\n            // Rotate tables\r\n            for ( var t = 1; t < 4; t++ ) {\r\n                aes_enc[t][i] = ( aes_enc[t-1][i] >>> 8 ) | ( aes_enc[t-1][i] << 24 );\r\n                aes_dec[t][s] = ( aes_dec[t-1][s] >>> 8 ) | ( aes_dec[t-1][s] << 24 );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asm.js module constructor.\r\n     *\r\n     * <p>\r\n     * Heap buffer layout by offset:\r\n     * <pre>\r\n     * 0x0000   encryption key schedule\r\n     * 0x0400   decryption key schedule\r\n     * 0x0800   sbox\r\n     * 0x0c00   inv sbox\r\n     * 0x1000   encryption tables\r\n     * 0x2000   decryption tables\r\n     * 0x3000   reserved (future GCM multiplication lookup table)\r\n     * 0x4000   data\r\n     * </pre>\r\n     * Don't touch anything before <code>0x400</code>.\r\n     * </p>\r\n     *\r\n     * @alias AES_asm\r\n     * @class\r\n     * @param {Object} foreign - <i>ignored</i>\r\n     * @param {ArrayBuffer} buffer - heap buffer to link with\r\n     */\r\n    var wrapper = function ( foreign, buffer ) {\r\n        // Init AES stuff for the first time\r\n        if ( !aes_init_done ) aes_init();\r\n\r\n        // Fill up AES tables\r\n        var heap = new Uint32Array(buffer);\r\n        heap.set( aes_sbox, 0x0800>>2 );\r\n        heap.set( aes_sinv, 0x0c00>>2 );\r\n        for ( var i = 0; i < 4; i++ ) {\r\n            heap.set( aes_enc[i], ( 0x1000 + 0x400 * i )>>2 );\r\n            heap.set( aes_dec[i], ( 0x2000 + 0x400 * i )>>2 );\r\n        }\r\n\r\n        /**\r\n         * Calculate AES key schedules.\r\n         * @instance\r\n         * @memberof AES_asm\r\n         * @param {int} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)\r\n         * @param {int} k0..k7 - key vector components\r\n         */\r\n        function set_key ( ks, k0, k1, k2, k3, k4, k5, k6, k7 ) {\r\n            var ekeys = heap.subarray( 0x000, 60 ),\r\n                dkeys = heap.subarray( 0x100, 0x100+60 );\r\n\r\n            // Encryption key schedule\r\n            ekeys.set( [ k0, k1, k2, k3, k4, k5, k6, k7 ] );\r\n            for ( var i = ks, rcon = 1; i < 4*ks+28; i++ ) {\r\n                var k = ekeys[i-1];\r\n                if ( ( i % ks === 0 ) || ( ks === 8 && i % ks === 4 ) ) {\r\n                    k = aes_sbox[k>>>24]<<24 ^ aes_sbox[k>>>16&255]<<16 ^ aes_sbox[k>>>8&255]<<8 ^ aes_sbox[k&255];\r\n                }\r\n                if ( i % ks === 0 ) {\r\n                    k = (k << 8) ^ (k >>> 24) ^ (rcon << 24);\r\n                    rcon = (rcon << 1) ^ ( (rcon & 0x80) ? 0x1b : 0 );\r\n                }\r\n                ekeys[i] = ekeys[i-ks] ^ k;\r\n            }\r\n\r\n            // Decryption key schedule\r\n            for ( var j = 0; j < i; j += 4 ) {\r\n                for ( var jj = 0; jj < 4; jj++ ) {\r\n                    var k = ekeys[i-(4+j)+(4-jj)%4];\r\n                    if ( j < 4 || j >= i-4 ) {\r\n                        dkeys[j+jj] = k;\r\n                    } else {\r\n                        dkeys[j+jj] = aes_dec[0][aes_sbox[k>>>24]]\r\n                                    ^ aes_dec[1][aes_sbox[k>>>16&255]]\r\n                                    ^ aes_dec[2][aes_sbox[k>>>8&255]]\r\n                                    ^ aes_dec[3][aes_sbox[k&255]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Set rounds number\r\n            asm.set_rounds( ks + 5 );\r\n        }\r\n\r\n        // create library object with necessary properties\r\n        var stdlib = { Uint8Array: Uint8Array, Uint32Array: Uint32Array };\r\n\r\n        var asm = function ( stdlib, foreign, buffer ) {\r\n            \"use asm\";\r\n\r\n            var S0 = 0, S1 = 0, S2 = 0, S3 = 0,\r\n                I0 = 0, I1 = 0, I2 = 0, I3 = 0,\r\n                N0 = 0, N1 = 0, N2 = 0, N3 = 0,\r\n                M0 = 0, M1 = 0, M2 = 0, M3 = 0,\r\n                H0 = 0, H1 = 0, H2 = 0, H3 = 0,\r\n                R = 0;\r\n\r\n            var HEAP = new stdlib.Uint32Array(buffer),\r\n                DATA = new stdlib.Uint8Array(buffer);\r\n\r\n            /**\r\n             * AES core\r\n             * @param {int} k - precomputed key schedule offset\r\n             * @param {int} s - precomputed sbox table offset\r\n             * @param {int} t - precomputed round table offset\r\n             * @param {int} r - number of inner rounds to perform\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _core ( k, s, t, r, x0, x1, x2, x3 ) {\r\n                k = k|0;\r\n                s = s|0;\r\n                t = t|0;\r\n                r = r|0;\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                var t1 = 0, t2 = 0, t3 = 0,\r\n                    y0 = 0, y1 = 0, y2 = 0, y3 = 0,\r\n                    i = 0;\r\n\r\n                t1 = t|0x400, t2 = t|0x800, t3 = t|0xc00;\r\n\r\n                // round 0\r\n                x0 = x0 ^ HEAP[(k|0)>>2],\r\n                x1 = x1 ^ HEAP[(k|4)>>2],\r\n                x2 = x2 ^ HEAP[(k|8)>>2],\r\n                x3 = x3 ^ HEAP[(k|12)>>2];\r\n\r\n                // round 1..r\r\n                for ( i = 16; (i|0) <= (r<<4); i = (i+16)|0 ) {\r\n                    y0 = HEAP[(t|x0>>22&1020)>>2] ^ HEAP[(t1|x1>>14&1020)>>2] ^ HEAP[(t2|x2>>6&1020)>>2] ^ HEAP[(t3|x3<<2&1020)>>2] ^ HEAP[(k|i|0)>>2],\r\n                    y1 = HEAP[(t|x1>>22&1020)>>2] ^ HEAP[(t1|x2>>14&1020)>>2] ^ HEAP[(t2|x3>>6&1020)>>2] ^ HEAP[(t3|x0<<2&1020)>>2] ^ HEAP[(k|i|4)>>2],\r\n                    y2 = HEAP[(t|x2>>22&1020)>>2] ^ HEAP[(t1|x3>>14&1020)>>2] ^ HEAP[(t2|x0>>6&1020)>>2] ^ HEAP[(t3|x1<<2&1020)>>2] ^ HEAP[(k|i|8)>>2],\r\n                    y3 = HEAP[(t|x3>>22&1020)>>2] ^ HEAP[(t1|x0>>14&1020)>>2] ^ HEAP[(t2|x1>>6&1020)>>2] ^ HEAP[(t3|x2<<2&1020)>>2] ^ HEAP[(k|i|12)>>2];\r\n                    x0 = y0, x1 = y1, x2 = y2, x3 = y3;\r\n                }\r\n\r\n                // final round\r\n                S0 = HEAP[(s|x0>>22&1020)>>2]<<24 ^ HEAP[(s|x1>>14&1020)>>2]<<16 ^ HEAP[(s|x2>>6&1020)>>2]<<8 ^ HEAP[(s|x3<<2&1020)>>2] ^ HEAP[(k|i|0)>>2],\r\n                S1 = HEAP[(s|x1>>22&1020)>>2]<<24 ^ HEAP[(s|x2>>14&1020)>>2]<<16 ^ HEAP[(s|x3>>6&1020)>>2]<<8 ^ HEAP[(s|x0<<2&1020)>>2] ^ HEAP[(k|i|4)>>2],\r\n                S2 = HEAP[(s|x2>>22&1020)>>2]<<24 ^ HEAP[(s|x3>>14&1020)>>2]<<16 ^ HEAP[(s|x0>>6&1020)>>2]<<8 ^ HEAP[(s|x1<<2&1020)>>2] ^ HEAP[(k|i|8)>>2],\r\n                S3 = HEAP[(s|x3>>22&1020)>>2]<<24 ^ HEAP[(s|x0>>14&1020)>>2]<<16 ^ HEAP[(s|x1>>6&1020)>>2]<<8 ^ HEAP[(s|x2<<2&1020)>>2] ^ HEAP[(k|i|12)>>2];\r\n            }\r\n\r\n            /**\r\n             * ECB mode encryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _ecb_enc ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                _core(\r\n                    0x0000, 0x0800, 0x1000,\r\n                    R,\r\n                    x0,\r\n                    x1,\r\n                    x2,\r\n                    x3\r\n                );\r\n            }\r\n\r\n            /**\r\n             * ECB mode decryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _ecb_dec ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                var t = 0;\r\n\r\n                _core(\r\n                    0x0400, 0x0c00, 0x2000,\r\n                    R,\r\n                    x0,\r\n                    x3,\r\n                    x2,\r\n                    x1\r\n                );\r\n\r\n                t = S1, S1 = S3, S3 = t;\r\n            }\r\n\r\n\r\n            /**\r\n             * CBC mode encryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _cbc_enc ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                _core(\r\n                    0x0000, 0x0800, 0x1000,\r\n                    R,\r\n                    I0 ^ x0,\r\n                    I1 ^ x1,\r\n                    I2 ^ x2,\r\n                    I3 ^ x3\r\n                );\r\n\r\n                I0 = S0,\r\n                I1 = S1,\r\n                I2 = S2,\r\n                I3 = S3;\r\n            }\r\n\r\n            /**\r\n             * CBC mode decryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _cbc_dec ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                var t = 0;\r\n\r\n                _core(\r\n                    0x0400, 0x0c00, 0x2000,\r\n                    R,\r\n                    x0,\r\n                    x3,\r\n                    x2,\r\n                    x1\r\n                );\r\n\r\n                t = S1, S1 = S3, S3 = t;\r\n\r\n                S0 = S0 ^ I0,\r\n                S1 = S1 ^ I1,\r\n                S2 = S2 ^ I2,\r\n                S3 = S3 ^ I3;\r\n\r\n                I0 = x0,\r\n                I1 = x1,\r\n                I2 = x2,\r\n                I3 = x3;\r\n            }\r\n\r\n            /**\r\n             * CFB mode encryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _cfb_enc ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                _core(\r\n                    0x0000, 0x0800, 0x1000,\r\n                    R,\r\n                    I0,\r\n                    I1,\r\n                    I2,\r\n                    I3\r\n                );\r\n\r\n                I0 = S0 = S0 ^ x0,\r\n                I1 = S1 = S1 ^ x1,\r\n                I2 = S2 = S2 ^ x2,\r\n                I3 = S3 = S3 ^ x3;\r\n            }\r\n\r\n\r\n            /**\r\n             * CFB mode decryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _cfb_dec ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                _core(\r\n                    0x0000, 0x0800, 0x1000,\r\n                    R,\r\n                    I0,\r\n                    I1,\r\n                    I2,\r\n                    I3\r\n                );\r\n\r\n                S0 = S0 ^ x0,\r\n                S1 = S1 ^ x1,\r\n                S2 = S2 ^ x2,\r\n                S3 = S3 ^ x3;\r\n\r\n                I0 = x0,\r\n                I1 = x1,\r\n                I2 = x2,\r\n                I3 = x3;\r\n            }\r\n\r\n            /**\r\n             * OFB mode encryption / decryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _ofb ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                _core(\r\n                    0x0000, 0x0800, 0x1000,\r\n                    R,\r\n                    I0,\r\n                    I1,\r\n                    I2,\r\n                    I3\r\n                );\r\n\r\n                I0 = S0,\r\n                I1 = S1,\r\n                I2 = S2,\r\n                I3 = S3;\r\n\r\n                S0 = S0 ^ x0,\r\n                S1 = S1 ^ x1,\r\n                S2 = S2 ^ x2,\r\n                S3 = S3 ^ x3;\r\n            }\r\n\r\n            /**\r\n             * CTR mode encryption / decryption\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _ctr ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                _core(\r\n                    0x0000, 0x0800, 0x1000,\r\n                    R,\r\n                    N0,\r\n                    N1,\r\n                    N2,\r\n                    N3\r\n                );\r\n\r\n                N3 = ( ~M3 & N3 ) | M3 & ( N3 + 1 ),\r\n                N2 = ( ~M2 & N2 ) | M2 & ( N2 + ( (N3|0) == 0 ) ),\r\n                N1 = ( ~M1 & N1 ) | M1 & ( N1 + ( (N2|0) == 0 ) ),\r\n                N0 = ( ~M0 & N0 ) | M0 & ( N0 + ( (N1|0) == 0 ) );\r\n\r\n                S0 = S0 ^ x0,\r\n                S1 = S1 ^ x1,\r\n                S2 = S2 ^ x2,\r\n                S3 = S3 ^ x3;\r\n            }\r\n\r\n            /**\r\n             * GCM mode MAC calculation\r\n             * @param {int} x0..x3 - 128-bit input block vector\r\n             */\r\n            function _gcm_mac ( x0, x1, x2, x3 ) {\r\n                x0 = x0|0;\r\n                x1 = x1|0;\r\n                x2 = x2|0;\r\n                x3 = x3|0;\r\n\r\n                var y0 = 0, y1 = 0, y2 = 0, y3 = 0,\r\n                    z0 = 0, z1 = 0, z2 = 0, z3 = 0,\r\n                    i = 0, c = 0;\r\n\r\n                x0 = x0 ^ I0,\r\n                x1 = x1 ^ I1,\r\n                x2 = x2 ^ I2,\r\n                x3 = x3 ^ I3;\r\n\r\n                y0 = H0|0,\r\n                y1 = H1|0,\r\n                y2 = H2|0,\r\n                y3 = H3|0;\r\n\r\n                for ( ; (i|0) < 128; i = (i + 1)|0 ) {\r\n                    if ( y0 >>> 31 ) {\r\n                        z0 = z0 ^ x0,\r\n                        z1 = z1 ^ x1,\r\n                        z2 = z2 ^ x2,\r\n                        z3 = z3 ^ x3;\r\n                    }\r\n\r\n                    y0 = (y0 << 1) | (y1 >>> 31),\r\n                    y1 = (y1 << 1) | (y2 >>> 31),\r\n                    y2 = (y2 << 1) | (y3 >>> 31),\r\n                    y3 = (y3 << 1);\r\n\r\n                    c = x3 & 1;\r\n\r\n                    x3 = (x3 >>> 1) | (x2 << 31),\r\n                    x2 = (x2 >>> 1) | (x1 << 31),\r\n                    x1 = (x1 >>> 1) | (x0 << 31),\r\n                    x0 = (x0 >>> 1);\r\n\r\n                    if ( c ) x0 = x0 ^ 0xe1000000;\r\n                }\r\n\r\n                I0 = z0,\r\n                I1 = z1,\r\n                I2 = z2,\r\n                I3 = z3;\r\n            }\r\n\r\n            /**\r\n             * Set the internal rounds number.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} r - number if inner AES rounds\r\n             */\r\n            function set_rounds ( r ) {\r\n                r = r|0;\r\n                R = r;\r\n            }\r\n\r\n            /**\r\n             * Populate the internal state of the module.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} s0...s3 - state vector\r\n             */\r\n            function set_state ( s0, s1, s2, s3 ) {\r\n                s0 = s0|0;\r\n                s1 = s1|0;\r\n                s2 = s2|0;\r\n                s3 = s3|0;\r\n\r\n                S0 = s0,\r\n                S1 = s1,\r\n                S2 = s2,\r\n                S3 = s3;\r\n            }\r\n\r\n            /**\r\n             * Populate the internal iv of the module.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} i0...i3 - iv vector\r\n             */\r\n            function set_iv ( i0, i1, i2, i3 ) {\r\n                i0 = i0|0;\r\n                i1 = i1|0;\r\n                i2 = i2|0;\r\n                i3 = i3|0;\r\n\r\n                I0 = i0,\r\n                I1 = i1,\r\n                I2 = i2,\r\n                I3 = i3;\r\n            }\r\n\r\n            /**\r\n             * Set nonce for CTR-family modes.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} n0..n3 - nonce vector\r\n             */\r\n            function set_nonce ( n0, n1, n2, n3 ) {\r\n                n0 = n0|0;\r\n                n1 = n1|0;\r\n                n2 = n2|0;\r\n                n3 = n3|0;\r\n\r\n                N0 = n0,\r\n                N1 = n1,\r\n                N2 = n2,\r\n                N3 = n3;\r\n            }\r\n\r\n            /**\r\n             * Set counter mask for CTR-family modes.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} m0...m3 - counter mask vector\r\n             */\r\n            function set_mask ( m0, m1, m2, m3 ) {\r\n                m0 = m0|0;\r\n                m1 = m1|0;\r\n                m2 = m2|0;\r\n                m3 = m3|0;\r\n\r\n                M0 = m0,\r\n                M1 = m1,\r\n                M2 = m2,\r\n                M3 = m3;\r\n            }\r\n\r\n            /**\r\n             * Set counter for CTR-family modes.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} c0...c3 - counter vector\r\n             */\r\n            function set_counter ( c0, c1, c2, c3 ) {\r\n                c0 = c0|0;\r\n                c1 = c1|0;\r\n                c2 = c2|0;\r\n                c3 = c3|0;\r\n\r\n                N3 = ( ~M3 & N3 ) | M3 & c3,\r\n                N2 = ( ~M2 & N2 ) | M2 & c2,\r\n                N1 = ( ~M1 & N1 ) | M1 & c1,\r\n                N0 = ( ~M0 & N0 ) | M0 & c0;\r\n            }\r\n\r\n            /**\r\n             * Store the internal state vector into the heap.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} pos - offset where to put the data\r\n             * @return {int} The number of bytes have been written into the heap, always 16.\r\n             */\r\n            function get_state ( pos ) {\r\n                pos = pos|0;\r\n\r\n                if ( pos & 15 ) return -1;\r\n\r\n                DATA[pos|0] = S0>>>24,\r\n                DATA[pos|1] = S0>>>16&255,\r\n                DATA[pos|2] = S0>>>8&255,\r\n                DATA[pos|3] = S0&255,\r\n                DATA[pos|4] = S1>>>24,\r\n                DATA[pos|5] = S1>>>16&255,\r\n                DATA[pos|6] = S1>>>8&255,\r\n                DATA[pos|7] = S1&255,\r\n                DATA[pos|8] = S2>>>24,\r\n                DATA[pos|9] = S2>>>16&255,\r\n                DATA[pos|10] = S2>>>8&255,\r\n                DATA[pos|11] = S2&255,\r\n                DATA[pos|12] = S3>>>24,\r\n                DATA[pos|13] = S3>>>16&255,\r\n                DATA[pos|14] = S3>>>8&255,\r\n                DATA[pos|15] = S3&255;\r\n\r\n                return 16;\r\n            }\r\n\r\n            /**\r\n             * Store the internal iv vector into the heap.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} pos - offset where to put the data\r\n             * @return {int} The number of bytes have been written into the heap, always 16.\r\n             */\r\n            function get_iv ( pos ) {\r\n                pos = pos|0;\r\n\r\n                if ( pos & 15 ) return -1;\r\n\r\n                DATA[pos|0] = I0>>>24,\r\n                DATA[pos|1] = I0>>>16&255,\r\n                DATA[pos|2] = I0>>>8&255,\r\n                DATA[pos|3] = I0&255,\r\n                DATA[pos|4] = I1>>>24,\r\n                DATA[pos|5] = I1>>>16&255,\r\n                DATA[pos|6] = I1>>>8&255,\r\n                DATA[pos|7] = I1&255,\r\n                DATA[pos|8] = I2>>>24,\r\n                DATA[pos|9] = I2>>>16&255,\r\n                DATA[pos|10] = I2>>>8&255,\r\n                DATA[pos|11] = I2&255,\r\n                DATA[pos|12] = I3>>>24,\r\n                DATA[pos|13] = I3>>>16&255,\r\n                DATA[pos|14] = I3>>>8&255,\r\n                DATA[pos|15] = I3&255;\r\n\r\n                return 16;\r\n            }\r\n\r\n            /**\r\n             * GCM initialization.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             */\r\n            function gcm_init ( ) {\r\n                _ecb_enc( 0, 0, 0, 0 );\r\n                H0 = S0,\r\n                H1 = S1,\r\n                H2 = S2,\r\n                H3 = S3;\r\n            }\r\n\r\n            /**\r\n             * Perform ciphering operation on the supplied data.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} mode - block cipher mode (see {@link AES_asm} mode constants)\r\n             * @param {int} pos - offset of the data being processed\r\n             * @param {int} len - length of the data being processed\r\n             * @return {int} Actual amount of data have been processed.\r\n             */\r\n            function cipher ( mode, pos, len ) {\r\n                mode = mode|0;\r\n                pos = pos|0;\r\n                len = len|0;\r\n\r\n                var ret = 0;\r\n\r\n                if ( pos & 15 ) return -1;\r\n\r\n                while ( (len|0) >= 16 ) {\r\n                    _cipher_modes[mode&7](\r\n                        DATA[pos|0]<<24 | DATA[pos|1]<<16 | DATA[pos|2]<<8 | DATA[pos|3],\r\n                        DATA[pos|4]<<24 | DATA[pos|5]<<16 | DATA[pos|6]<<8 | DATA[pos|7],\r\n                        DATA[pos|8]<<24 | DATA[pos|9]<<16 | DATA[pos|10]<<8 | DATA[pos|11],\r\n                        DATA[pos|12]<<24 | DATA[pos|13]<<16 | DATA[pos|14]<<8 | DATA[pos|15]\r\n                    );\r\n\r\n                    DATA[pos|0] = S0>>>24,\r\n                    DATA[pos|1] = S0>>>16&255,\r\n                    DATA[pos|2] = S0>>>8&255,\r\n                    DATA[pos|3] = S0&255,\r\n                    DATA[pos|4] = S1>>>24,\r\n                    DATA[pos|5] = S1>>>16&255,\r\n                    DATA[pos|6] = S1>>>8&255,\r\n                    DATA[pos|7] = S1&255,\r\n                    DATA[pos|8] = S2>>>24,\r\n                    DATA[pos|9] = S2>>>16&255,\r\n                    DATA[pos|10] = S2>>>8&255,\r\n                    DATA[pos|11] = S2&255,\r\n                    DATA[pos|12] = S3>>>24,\r\n                    DATA[pos|13] = S3>>>16&255,\r\n                    DATA[pos|14] = S3>>>8&255,\r\n                    DATA[pos|15] = S3&255;\r\n\r\n                    ret = (ret + 16)|0,\r\n                    pos = (pos + 16)|0,\r\n                    len = (len - 16)|0;\r\n                }\r\n\r\n                return ret|0;\r\n            }\r\n\r\n            /**\r\n             * Calculates MAC of the supplied data.\r\n             * @instance\r\n             * @memberof AES_asm\r\n             * @param {int} mode - block cipher mode (see {@link AES_asm} mode constants)\r\n             * @param {int} pos - offset of the data being processed\r\n             * @param {int} len - length of the data being processed\r\n             * @return {int} Actual amount of data have been processed.\r\n             */\r\n            function mac ( mode, pos, len ) {\r\n                mode = mode|0;\r\n                pos = pos|0;\r\n                len = len|0;\r\n\r\n                var ret = 0;\r\n\r\n                if ( pos & 15 ) return -1;\r\n\r\n                while ( (len|0) >= 16 ) {\r\n                    _mac_modes[mode&1](\r\n                        DATA[pos|0]<<24 | DATA[pos|1]<<16 | DATA[pos|2]<<8 | DATA[pos|3],\r\n                        DATA[pos|4]<<24 | DATA[pos|5]<<16 | DATA[pos|6]<<8 | DATA[pos|7],\r\n                        DATA[pos|8]<<24 | DATA[pos|9]<<16 | DATA[pos|10]<<8 | DATA[pos|11],\r\n                        DATA[pos|12]<<24 | DATA[pos|13]<<16 | DATA[pos|14]<<8 | DATA[pos|15]\r\n                    );\r\n\r\n                    ret = (ret + 16)|0,\r\n                    pos = (pos + 16)|0,\r\n                    len = (len - 16)|0;\r\n                }\r\n\r\n                return ret|0;\r\n            }\r\n\r\n            /**\r\n             * AES cipher modes table (virual methods)\r\n             */\r\n            var _cipher_modes = [ _ecb_enc, _ecb_dec, _cbc_enc, _cbc_dec, _cfb_enc, _cfb_dec, _ofb, _ctr ];\r\n\r\n            /**\r\n             * AES MAC modes table (virual methods)\r\n             */\r\n            var _mac_modes = [ _cbc_enc, _gcm_mac ];\r\n\r\n            /**\r\n             * Asm.js module exports\r\n             */\r\n            return {\r\n                set_rounds: set_rounds,\r\n                set_state:  set_state,\r\n                set_iv:     set_iv,\r\n                set_nonce:  set_nonce,\r\n                set_mask:   set_mask,\r\n                set_counter:set_counter,\r\n                get_state:  get_state,\r\n                get_iv:     get_iv,\r\n                gcm_init:   gcm_init,\r\n                cipher:     cipher,\r\n                mac:        mac\r\n            };\r\n        }( stdlib, foreign, buffer );\r\n\r\n        asm.set_key = set_key;\r\n\r\n        return asm;\r\n    };\r\n\r\n    /**\r\n     * AES enciphering mode constants\r\n     * @enum {int}\r\n     * @const\r\n     */\r\n    wrapper.ENC = {\r\n        ECB: 0,\r\n        CBC: 2,\r\n        CFB: 4,\r\n        OFB: 6,\r\n        CTR: 7\r\n    },\r\n\r\n    /**\r\n     * AES deciphering mode constants\r\n     * @enum {int}\r\n     * @const\r\n     */\r\n    wrapper.DEC = {\r\n        ECB: 1,\r\n        CBC: 3,\r\n        CFB: 5,\r\n        OFB: 6,\r\n        CTR: 7\r\n    },\r\n\r\n    /**\r\n     * AES MAC mode constants\r\n     * @enum {int}\r\n     * @const\r\n     */\r\n    wrapper.MAC = {\r\n        CBC: 0,\r\n        GCM: 1\r\n    };\r\n\r\n    /**\r\n     * Heap data offset\r\n     * @type {int}\r\n     * @const\r\n     */\r\n    wrapper.HEAP_DATA = 0x4000;\r\n\r\n    return wrapper;\r\n}();\r\n"],"names":[],"mappings":"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CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAClI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAClI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAClI,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACxJ,oBAAoB,EAAE,GAAG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"}