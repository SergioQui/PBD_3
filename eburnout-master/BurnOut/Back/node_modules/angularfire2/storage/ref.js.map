{"version":3,"file":"ref.js","sourceRoot":"","sources":["../../../src/storage/ref.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAyB,MAAM,QAAQ,CAAC;AAEjE,OAAO,EAAE,IAAI,EAAE,MAAM,sBAAsB,CAAC;AAiB5C,MAAM,2BAA2B,GAAsB;IACrD,MAAM,CAAC;QACL,cAAc,gBAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE;QACvD,WAAW,gBAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAA,EAAE;QAChD,MAAM,gBAAK,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE;QACvC,KAAK,YAAC,IAAY,IAAI,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;QACjE,eAAe,YAAC,IAA8B;YAC5C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;SACvC;QACD,GAAG,YAAC,IAAS,EAAE,QAAiC;YAC9C,IAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACrC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC/B;QACD,SAAS,YAAC,IAAY,EAAE,MAA6B,EAAE,QAAiC;YACtF,IAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;YACnD,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;SAC/B;KACF,CAAA;CACF","sourcesContent":["import { storage } from 'firebase/app';\nimport { createUploadTask, AngularFireUploadTask } from './task';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\n\nexport interface AngularFireStorageReference {\n  getDownloadURL(): Observable<any>;\n  getMetadata(): Observable<any>;\n  delete(): Observable<any>;\n  child(path: string): any;\n  updateMetatdata(meta: storage.SettableMetadata): Observable<any>;\n  put(data: any, metadata?: storage.UploadMetadata | undefined): AngularFireUploadTask;\n  putString(data: string, format?: string | undefined, metadata?: storage.UploadMetadata | undefined): AngularFireUploadTask;\n}\n\n/**\n * Create an AngularFire wrapped Storage Reference. This object\n * creates observable methods from promise based methods.\n * @param ref \n */\nexport function createStorageRef(ref: storage.Reference): AngularFireStorageReference {\n  return {\n    getDownloadURL() { return from(ref.getDownloadURL()); },\n    getMetadata() { return from(ref.getMetadata()) },\n    delete() { return from(ref.delete()); },\n    child(path: string) { return createStorageRef(ref.child(path)); },\n    updateMetatdata(meta: storage.SettableMetadata) { \n      return from(ref.updateMetadata(meta)); \n    },\n    put(data: any, metadata?: storage.UploadMetadata) {\n      const task = ref.put(data, metadata);\n      return createUploadTask(task);\n    },\n    putString(data: string, format?: storage.StringFormat, metadata?: storage.UploadMetadata) {\n      const task = ref.putString(data, format, metadata);\n      return createUploadTask(task);\n    }\n  }\n}\n"]}